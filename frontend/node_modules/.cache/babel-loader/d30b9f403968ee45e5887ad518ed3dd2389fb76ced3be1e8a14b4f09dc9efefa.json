{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './Columns';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BasicTable({\n  fulldata\n}) {\n  _s();\n  const [data, setData] = useState(fulldata); // Локальное состояние данных\n  const [editableRowIndex, setEditableRowIndex] = useState(null); // Индекс редактируемой строки\n\n  const columns = useMemo(() => COLUMNS, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n\n  // Функция добавления новой строки\n  const addRow = () => {\n    const newRow = {\n      id: data.length + 1,\n      name: '',\n      age: ''\n    };\n    setData([...data, newRow]);\n    setEditableRowIndex(data.length);\n  };\n\n  // Обработчик изменения значений в новой строке\n  const handleInputChange = (rowIndex, columnId, value) => {\n    if (rowIndex === editableRowIndex) {\n      const newData = [...data];\n      newData[rowIndex][columnId] = value;\n      setData(newData);\n    }\n  };\n\n  // Обновляем таблицу при смене `fulldata`\n  useEffect(() => {\n    setData(fulldata); // Обновляем данные\n    setEditableRowIndex(null); // Сбрасываем редактируемую строку\n  }, [fulldata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.addButton,\n      onClick: addRow,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => {\n          const headerGroupProps = headerGroup.getHeaderGroupProps();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...headerGroupProps,\n            children: headerGroup.headers.map(column => {\n              const columnProps = column.getHeaderProps();\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                ...columnProps,\n                children: column.render('Header')\n              }, columnProps.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 41\n              }, this);\n            })\n          }, headerGroupProps.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          const rowProps = row.getRowProps(); // Получаем отдельно props\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...rowProps,\n            children: row.cells.map(cell => {\n              const cellProps = cell.getCellProps(); // Аналогично для ячеек\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cellProps,\n                children: rowIndex === editableRowIndex && cell.column.id !== 'id' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: classes.input,\n                  value: cell.value || '',\n                  onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 49\n                }, this) : cell.render('Cell')\n              }, cellProps.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 41\n              }, this);\n            })\n          }, rowProps.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicTable, \"ZZUO3YKti9LbB07IstyPWe8yMPc=\", false, function () {\n  return [useTable];\n});\n_c = BasicTable;\nexport default BasicTable;\nvar _c;\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useTable","COLUMNS","classes","jsxDEV","_jsxDEV","BasicTable","fulldata","_s","data","setData","editableRowIndex","setEditableRowIndex","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","addRow","newRow","id","length","name","age","handleInputChange","rowIndex","columnId","value","newData","className","container","children","addButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","table","map","headerGroup","headerGroupProps","getHeaderGroupProps","headers","column","columnProps","getHeaderProps","render","key","row","rowProps","getRowProps","cells","cell","cellProps","getCellProps","input","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { COLUMNS } from './Columns';\r\nimport classes from './MyTable.module.css';\r\n\r\nfunction BasicTable({ fulldata }) {\r\n    const [data, setData] = useState(fulldata); // Локальное состояние данных\r\n    const [editableRowIndex, setEditableRowIndex] = useState(null); // Индекс редактируемой строки\r\n\r\n    const columns = useMemo(() => COLUMNS, []); \r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data\r\n    });\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    // Функция добавления новой строки\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: data.length + 1,\r\n            name: '',\r\n            age: '',\r\n        };\r\n        setData([...data, newRow]);\r\n        setEditableRowIndex(data.length);\r\n    };\r\n\r\n    // Обработчик изменения значений в новой строке\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        if (rowIndex === editableRowIndex) {\r\n            const newData = [...data];\r\n            newData[rowIndex][columnId] = value;\r\n            setData(newData);\r\n        }\r\n    };\r\n\r\n    // Обновляем таблицу при смене `fulldata`\r\n    useEffect(() => {\r\n        setData(fulldata); // Обновляем данные\r\n        setEditableRowIndex(null); // Сбрасываем редактируемую строку\r\n    }, [fulldata]);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <button className={classes.addButton} onClick={addRow}>Добавить строку</button>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => {\r\n                        const headerGroupProps = headerGroup.getHeaderGroupProps();\r\n                        return (\r\n                            <tr key={headerGroupProps.key} {...headerGroupProps}>\r\n                                {headerGroup.headers.map(column => {\r\n                                    const columnProps = column.getHeaderProps();\r\n                                    return (\r\n                                        <th key={columnProps.key} {...columnProps}>\r\n                                            {column.render('Header')}\r\n                                        </th>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        const rowProps = row.getRowProps(); // Получаем отдельно props\r\n                        return (\r\n                            <tr key={rowProps.key} {...rowProps}> \r\n                                {row.cells.map(cell => {\r\n                                    const cellProps = cell.getCellProps(); // Аналогично для ячеек\r\n                                    return (\r\n                                        <td key={cellProps.key} {...cellProps}>\r\n                                            {rowIndex === editableRowIndex && cell.column.id !== 'id' ? (\r\n                                                <input\r\n                                                    className={classes.input}\r\n                                                    value={cell.value || ''}\r\n                                                    onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                />\r\n                                            ) : (\r\n                                                cell.render('Cell')\r\n                                            )}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BasicTable;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3D,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,UAAUA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAACQ,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACI,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhE,MAAMc,OAAO,GAAGf,OAAO,CAAC,MAAMI,OAAO,EAAE,EAAE,CAAC;EAE1C,MAAMY,aAAa,GAAGb,QAAQ,CAAC;IAC3BY,OAAO;IACPJ;EACJ,CAAC,CAAC;EAEF,MAAM;IAAEM,aAAa;IAAEC,iBAAiB;IAAEC,YAAY;IAAEC,IAAI;IAAEC;EAAW,CAAC,GAAGL,aAAa;;EAE1F;EACA,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACjB,MAAMC,MAAM,GAAG;MACXC,EAAE,EAAEb,IAAI,CAACc,MAAM,GAAG,CAAC;MACnBC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE;IACT,CAAC;IACDf,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAEY,MAAM,CAAC,CAAC;IAC1BT,mBAAmB,CAACH,IAAI,CAACc,MAAM,CAAC;EACpC,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IACrD,IAAIF,QAAQ,KAAKhB,gBAAgB,EAAE;MAC/B,MAAMmB,OAAO,GAAG,CAAC,GAAGrB,IAAI,CAAC;MACzBqB,OAAO,CAACH,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGC,KAAK;MACnCnB,OAAO,CAACoB,OAAO,CAAC;IACpB;EACJ,CAAC;;EAED;EACA9B,SAAS,CAAC,MAAM;IACZU,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC;IACnBK,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,oBACIF,OAAA;IAAK0B,SAAS,EAAE5B,OAAO,CAAC6B,SAAU;IAAAC,QAAA,gBAC9B5B,OAAA;MAAQ0B,SAAS,EAAE5B,OAAO,CAAC+B,SAAU;MAACC,OAAO,EAAEf,MAAO;MAAAa,QAAA,EAAC;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/ElC,OAAA;MAAO0B,SAAS,EAAE5B,OAAO,CAACqC,KAAM;MAAA,GAAKzB,aAAa,CAAC,CAAC;MAAAkB,QAAA,gBAChD5B,OAAA;QAAA4B,QAAA,EACKhB,YAAY,CAACwB,GAAG,CAACC,WAAW,IAAI;UAC7B,MAAMC,gBAAgB,GAAGD,WAAW,CAACE,mBAAmB,CAAC,CAAC;UAC1D,oBACIvC,OAAA;YAAA,GAAmCsC,gBAAgB;YAAAV,QAAA,EAC9CS,WAAW,CAACG,OAAO,CAACJ,GAAG,CAACK,MAAM,IAAI;cAC/B,MAAMC,WAAW,GAAGD,MAAM,CAACE,cAAc,CAAC,CAAC;cAC3C,oBACI3C,OAAA;gBAAA,GAA8B0C,WAAW;gBAAAd,QAAA,EACpCa,MAAM,CAACG,MAAM,CAAC,QAAQ;cAAC,GADnBF,WAAW,CAACG,GAAG;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEpB,CAAC;YAEb,CAAC;UAAC,GARGI,gBAAgB,CAACO,GAAG;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASzB,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRlC,OAAA;QAAA,GAAWW,iBAAiB,CAAC,CAAC;QAAAiB,QAAA,EACzBf,IAAI,CAACuB,GAAG,CAAC,CAACU,GAAG,EAAExB,QAAQ,KAAK;UACzBR,UAAU,CAACgC,GAAG,CAAC;UACf,MAAMC,QAAQ,GAAGD,GAAG,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;UACpC,oBACIhD,OAAA;YAAA,GAA2B+C,QAAQ;YAAAnB,QAAA,EAC9BkB,GAAG,CAACG,KAAK,CAACb,GAAG,CAACc,IAAI,IAAI;cACnB,MAAMC,SAAS,GAAGD,IAAI,CAACE,YAAY,CAAC,CAAC,CAAC,CAAC;cACvC,oBACIpD,OAAA;gBAAA,GAA4BmD,SAAS;gBAAAvB,QAAA,EAChCN,QAAQ,KAAKhB,gBAAgB,IAAI4C,IAAI,CAACT,MAAM,CAACxB,EAAE,KAAK,IAAI,gBACrDjB,OAAA;kBACI0B,SAAS,EAAE5B,OAAO,CAACuD,KAAM;kBACzB7B,KAAK,EAAE0B,IAAI,CAAC1B,KAAK,IAAI,EAAG;kBACxB8B,QAAQ,EAAGC,CAAC,IAAKlC,iBAAiB,CAACC,QAAQ,EAAE4B,IAAI,CAACT,MAAM,CAACxB,EAAE,EAAEsC,CAAC,CAACC,MAAM,CAAChC,KAAK;gBAAE;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChF,CAAC,GAEFgB,IAAI,CAACN,MAAM,CAAC,MAAM;cACrB,GATIO,SAAS,CAACN,GAAG;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAUlB,CAAC;YAEb,CAAC;UAAC,GAhBGa,QAAQ,CAACF,GAAG;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAiBjB,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd;AAAC/B,EAAA,CAzFQF,UAAU;EAAA,QAMOL,QAAQ;AAAA;AAAA6D,EAAA,GANzBxD,UAAU;AA2FnB,eAAeA,UAAU;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}