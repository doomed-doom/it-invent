{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './Columns';\nimport { fetchData } from '../../../utils/fetchData';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicTable = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  columnlist,\n  fulldata\n}, ref) => {\n  _s();\n  const currentTab = window.location.pathname.slice(1);\n  const [data, setData] = useState(fulldata);\n  const [editableRowIndex, setEditableRowIndex] = useState(null);\n  const columns = useMemo(() => columnlist, []);\n  const [, updateComponent] = useState(0);\n  const [response, setResponse] = useState(null);\n  const [fetchError, setfetchError] = useState();\n\n  // useEffect(() => {\n  //     fetchData(\"assets/custom\", \"get\", null, setResponse)\n  //     if (response) {\n  //         console.log(response)\n  //     } else {\n  //         console.log('Нет данных')\n  //     }\n  // }, [])\n\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  const addRow = () => {\n    const newRow = {\n      id: data.at(-1)\n    };\n    setData([...data, newRow]);\n    setEditableRowIndex(data.length);\n    console.log(data.length);\n  };\n  const cancelEdit = () => {\n    if (editableRowIndex !== null) {\n      const lastRow = data[editableRowIndex];\n      // if (lastRow) {\n      //     const rowData = {};\n      //     columns.forEach(column => {\n      //         if (column.accessor) {\n      //             rowData[column.accessor] = lastRow[column.accessor] || '';\n      //         }\n      //     });\n      //     fetchData(currentTab, \"post\", rowData, setResponse);\n      //     console.log(\"Отменена последняя добавленная строка:\", rowData);\n      // }\n      setData(prevData => prevData.slice(0, -1));\n      setEditableRowIndex(null);\n    }\n  };\n  const sendData = () => {\n    cancelEdit();\n    console.log(response);\n    const lastRow = data[editableRowIndex];\n    const rowData = {};\n    columns.forEach(column => {\n      if (column.accessor) {\n        rowData[column.accessor] = lastRow[column.accessor] || '-';\n      }\n    });\n    console.log(\"Отменена последняя добавленная строка:\", rowData);\n    fetchData(currentTab, \"post\", rowData, setResponse, setfetchError);\n    console.log(response);\n    updateComponent(prev => prev + 1);\n  };\n  const handleInputChange = (rowIndex, columnId, value) => {\n    if (rowIndex === editableRowIndex) {\n      const newData = [...data];\n      newData[rowIndex][columnId] = value;\n      setData(newData);\n    }\n  };\n  useEffect(() => {\n    setData(fulldata);\n    setEditableRowIndex(null);\n  }, [fulldata]);\n  useImperativeHandle(ref, () => ({\n    addRow,\n    cancelEdit,\n    sendData\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => {\n          const {\n            key,\n            ...headerGroupProps\n          } = headerGroup.getHeaderGroupProps();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: classes.table__row,\n            ...headerGroupProps,\n            children: headerGroup.headers.map(column => {\n              const {\n                key,\n                ...columnProps\n              } = column.getHeaderProps();\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                className: classes.table__cell,\n                ...columnProps,\n                children: column.render('Header')\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 41\n              }, this);\n            })\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          const {\n            key,\n            ...rowProps\n          } = row.getRowProps();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: classes.table__row,\n            ...rowProps,\n            children: row.cells.map(cell => {\n              const {\n                key,\n                ...cellProps\n              } = cell.getCellProps();\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: classes.table__cell,\n                ...cellProps,\n                children: rowIndex === editableRowIndex && cell.column.id !== 'id' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: classes.input,\n                  value: cell.value || '',\n                  onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 49\n                }, this) : cell.render('Cell')\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 41\n              }, this);\n            })\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: fetchError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}, \"/FHBLY9hEa2DD7ihlKU7p40wMAs=\", false, function () {\n  return [useTable];\n})), \"/FHBLY9hEa2DD7ihlKU7p40wMAs=\", false, function () {\n  return [useTable];\n});\n_c2 = BasicTable;\nexport default BasicTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"BasicTable$forwardRef\");\n$RefreshReg$(_c2, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useImperativeHandle","forwardRef","useTable","COLUMNS","fetchData","classes","jsxDEV","_jsxDEV","BasicTable","_s","_c","columnlist","fulldata","ref","currentTab","window","location","pathname","slice","data","setData","editableRowIndex","setEditableRowIndex","columns","updateComponent","response","setResponse","fetchError","setfetchError","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","addRow","newRow","id","at","length","console","log","cancelEdit","lastRow","prevData","sendData","rowData","forEach","column","accessor","prev","handleInputChange","rowIndex","columnId","value","newData","className","container","children","table","map","headerGroup","key","headerGroupProps","getHeaderGroupProps","table__row","headers","columnProps","getHeaderProps","table__cell","render","fileName","_jsxFileName","lineNumber","columnNumber","row","rowProps","getRowProps","cells","cell","cellProps","getCellProps","input","onChange","e","target","required","_c2","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { COLUMNS } from './Columns';\r\nimport { fetchData } from '../../../utils/fetchData';\r\nimport classes from './MyTable.module.css';\r\n\r\nconst BasicTable = forwardRef(( {columnlist, fulldata }, ref) => {\r\n    const currentTab = window.location.pathname.slice(1);\r\n    const [data, setData] = useState(fulldata);\r\n    const [editableRowIndex, setEditableRowIndex] = useState(null);\r\n\r\n    const columns = useMemo(() => columnlist, []);\r\n\r\n    const [, updateComponent] = useState(0);\r\n\r\n    const [response, setResponse] = useState(null);\r\n    const [fetchError, setfetchError] = useState();\r\n\r\n    // useEffect(() => {\r\n    //     fetchData(\"assets/custom\", \"get\", null, setResponse)\r\n    //     if (response) {\r\n    //         console.log(response)\r\n    //     } else {\r\n    //         console.log('Нет данных')\r\n    //     }\r\n    // }, [])\r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data,\r\n    });\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: data.at(-1),\r\n        };\r\n        setData([...data, newRow]);\r\n        setEditableRowIndex(data.length);\r\n        console.log(data.length)\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        if (editableRowIndex !== null) {\r\n            const lastRow = data[editableRowIndex];\r\n            // if (lastRow) {\r\n            //     const rowData = {};\r\n            //     columns.forEach(column => {\r\n            //         if (column.accessor) {\r\n            //             rowData[column.accessor] = lastRow[column.accessor] || '';\r\n            //         }\r\n            //     });\r\n            //     fetchData(currentTab, \"post\", rowData, setResponse);\r\n            //     console.log(\"Отменена последняя добавленная строка:\", rowData);\r\n            // }\r\n            setData(prevData => prevData.slice(0, -1));\r\n            setEditableRowIndex(null);\r\n        }\r\n    };\r\n\r\n    const sendData = () => {\r\n        cancelEdit();\r\n        console.log(response)\r\n        const lastRow = data[editableRowIndex];\r\n        const rowData = {};\r\n        columns.forEach(column => {\r\n            if (column.accessor) {\r\n                rowData[column.accessor] = lastRow[column.accessor] || '-';\r\n            }\r\n        });\r\n        console.log(\"Отменена последняя добавленная строка:\", rowData);\r\n        fetchData(currentTab, \"post\", rowData, setResponse, setfetchError)\r\n        console.log(response)\r\n        updateComponent(prev => prev + 1)\r\n    }\r\n\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        if (rowIndex === editableRowIndex) {\r\n            const newData = [...data];\r\n            newData[rowIndex][columnId] = value;\r\n            setData(newData);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setData(fulldata);\r\n        setEditableRowIndex(null);\r\n    }, [fulldata]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        addRow,\r\n        cancelEdit,\r\n        sendData\r\n    }));\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => {\r\n                        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps();\r\n                        return (\r\n                            <tr className={classes.table__row} key={key} {...headerGroupProps}>\r\n                                {headerGroup.headers.map(column => {\r\n                                    const { key, ...columnProps } = column.getHeaderProps();\r\n                                    return (\r\n                                        <th className={classes.table__cell} key={key} {...columnProps}>\r\n                                            {column.render('Header')}\r\n                                        </th>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        const { key, ...rowProps } = row.getRowProps();\r\n                        return (\r\n                            <tr className={classes.table__row} key={key} {...rowProps}>\r\n                                {row.cells.map(cell => {\r\n                                    const { key, ...cellProps } = cell.getCellProps();\r\n                                    return (\r\n                                        <td className={classes.table__cell} key={key} {...cellProps}>\r\n                                            {rowIndex === editableRowIndex && cell.column.id !== 'id' ? (\r\n                                                <input\r\n                                                    className={classes.input}\r\n                                                    value={cell.value || ''}\r\n                                                    onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            ) : (\r\n                                                cell.render('Cell')\r\n                                            )}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                {fetchError && <div>{fetchError}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default BasicTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}