{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './Columns';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicTable = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  fulldata\n}, ref) => {\n  _s();\n  const [data, setData] = useState(fulldata);\n  const [editableRowIndex, setEditableRowIndex] = useState(null);\n  const columns = useMemo(() => COLUMNS, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  const addRow = () => {\n    const newRow = {\n      id: data.length + 1\n    };\n    setData([...data, newRow]);\n    setEditableRowIndex(data.length);\n  };\n  const handleInputChange = (rowIndex, columnId, value) => {\n    if (rowIndex === editableRowIndex) {\n      const newData = [...data];\n      newData[rowIndex][columnId] = value;\n      setData(newData);\n    }\n  };\n  useEffect(() => {\n    setData(fulldata);\n    setEditableRowIndex(null);\n  }, [fulldata]);\n  useImperativeHandle(ref, () => ({\n    addRow\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.addButton,\n      onClick: addRow,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => {\n          const {\n            key,\n            ...headerGroupProps\n          } = headerGroup.getHeaderGroupProps();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: classes.table__row,\n            ...headerGroupProps,\n            children: headerGroup.headers.map(column => {\n              const {\n                key,\n                ...columnProps\n              } = column.getHeaderProps();\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                className: classes.table__cell,\n                ...columnProps,\n                children: column.render('Header')\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 41\n              }, this);\n            })\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          const {\n            key,\n            ...rowProps\n          } = row.getRowProps();\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: classes.table__row,\n            ...rowProps,\n            children: row.cells.map(cell => {\n              const {\n                key,\n                ...cellProps\n              } = cell.getCellProps();\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: classes.table__cell,\n                ...cellProps,\n                children: rowIndex === editableRowIndex && cell.column.id !== 'id' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: classes.input,\n                  value: cell.value || '',\n                  onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 49\n                }, this) : cell.render('Cell')\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 41\n              }, this);\n            })\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}, \"nuSjenFnofF6ehmOY4WM4IR7gv8=\", false, function () {\n  return [useTable];\n})), \"nuSjenFnofF6ehmOY4WM4IR7gv8=\", false, function () {\n  return [useTable];\n});\n_c2 = BasicTable;\nexport default BasicTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"BasicTable$forwardRef\");\n$RefreshReg$(_c2, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useImperativeHandle","forwardRef","useTable","COLUMNS","classes","jsxDEV","_jsxDEV","BasicTable","_s","_c","fulldata","ref","data","setData","editableRowIndex","setEditableRowIndex","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","addRow","newRow","id","length","handleInputChange","rowIndex","columnId","value","newData","className","container","children","addButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","table","map","headerGroup","key","headerGroupProps","getHeaderGroupProps","table__row","headers","column","columnProps","getHeaderProps","table__cell","render","row","rowProps","getRowProps","cells","cell","cellProps","getCellProps","input","onChange","e","target","_c2","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { COLUMNS } from './Columns';\r\nimport classes from './MyTable.module.css';\r\n\r\nconst BasicTable = forwardRef(({ fulldata }, ref) => {\r\n    const [data, setData] = useState(fulldata);\r\n    const [editableRowIndex, setEditableRowIndex] = useState(null);\r\n\r\n    const columns = useMemo(() => COLUMNS, []);\r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data\r\n    });\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: data.length + 1,\r\n        };\r\n        setData([...data, newRow]);\r\n        setEditableRowIndex(data.length);\r\n    };\r\n\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        if (rowIndex === editableRowIndex) {\r\n            const newData = [...data];\r\n            newData[rowIndex][columnId] = value;\r\n            setData(newData);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setData(fulldata);\r\n        setEditableRowIndex(null);\r\n    }, [fulldata]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        addRow\r\n    }));\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <button className={classes.addButton} onClick={addRow}>Добавить строку</button>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => {\r\n                        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps();\r\n                        return (\r\n                            <tr className={classes.table__row} key={key} {...headerGroupProps}>\r\n                                {headerGroup.headers.map(column => {\r\n                                    const { key, ...columnProps } = column.getHeaderProps();\r\n                                    return (\r\n                                        <th className={classes.table__cell} key={key} {...columnProps}>\r\n                                            {column.render('Header')}\r\n                                        </th>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        const { key, ...rowProps } = row.getRowProps();\r\n                        return (\r\n                            <tr className={classes.table__row} key={key} {...rowProps}>\r\n                                {row.cells.map(cell => {\r\n                                    const { key, ...cellProps } = cell.getCellProps();\r\n                                    return (\r\n                                        <td className={classes.table__cell} key={key} {...cellProps}>\r\n                                            {rowIndex === editableRowIndex && cell.column.id !== 'id' ? (\r\n                                                <input\r\n                                                    className={classes.input}\r\n                                                    value={cell.value || ''}\r\n                                                    onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                />\r\n                                            ) : (\r\n                                                cell.render('Cell')\r\n                                            )}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default BasicTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}