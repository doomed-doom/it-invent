{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef, createElement as _createElement } from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport { fetchData } from '../../../utils/fetchData';\nimport { Pencil } from 'lucide-react';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicTable = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  columnlist,\n  fulldata,\n  onEditingChange\n}, ref) => {\n  _s();\n  const currentTab = window.location.pathname.slice(1);\n  const [data, setData] = useState(fulldata);\n  const [editableCell, setEditableCell] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [newRowIndex, setNewRowIndex] = useState(null); // Индекс новой строки\n  const [originalData, setOriginalData] = useState([]); // Храним исходные данные для восстановления\n  const columns = useMemo(() => columnlist, [columnlist]);\n  const [response, setResponse] = useState(null);\n  const [fetchError, setFetchError] = useState(null);\n  const [editedCells, setEditedCells] = useState({});\n\n  // Константа, которая будет true, если редактируется любая ячейка с помощью Pencil\n  const isEditingWithPencil = isEditing && editableCell !== null;\n  useEffect(() => {\n    if (onEditingChange) {\n      onEditingChange(isEditingWithPencil);\n    }\n  }, [isEditingWithPencil, isEditing]);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  const handleInputChange = (rowIndex, columnId, value) => {\n    setEditedCells(prev => ({\n      ...prev,\n      [`${rowIndex}-${columnId}`]: value\n    }));\n    setData(prevData => {\n      const newData = [...prevData];\n      newData[rowIndex] = {\n        ...newData[rowIndex],\n        [columnId]: value\n      };\n      return newData;\n    });\n  };\n  const handleEditClick = (rowIndex, columnId) => {\n    setEditableCell({\n      rowIndex,\n      columnId\n    });\n    setIsEditing(true);\n  };\n  const handleBlur = event => {\n    setTimeout(() => {\n      if (!document.activeElement.classList.contains(classes.input)) {\n        setEditableCell(null);\n        setIsEditing(false);\n      }\n    }, 100);\n  };\n  const addRow = () => {\n    if (isEditing) return; // Если уже редактируем, не создаем новую строку\n\n    // Проверяем, есть ли предыдущая строка и является ли она пустой\n    const lastRowIndex = data.length - 1;\n    const lastRow = data[lastRowIndex];\n    const isLastRowEmpty = lastRow && Object.keys(lastRow).every(key => {\n      if (key === 'id') return true; // Пропускаем проверку для 'id'\n      return lastRow[key] === \"\" || lastRow[key] === null || lastRow[key] === undefined;\n    });\n    if (isLastRowEmpty) {\n      // Если предыдущая строка пустая, делаем её редактируемой\n      setEditableCell({\n        rowIndex: lastRowIndex,\n        columnId: columnlist[0].accessor\n      });\n      setIsEditing(true);\n      onEditingChange === null || onEditingChange === void 0 ? void 0 : onEditingChange(true); // Сообщаем родительскому компоненту о начале редактирования\n    } else {\n      // Если предыдущая строка не пустая, добавляем новую строку\n      setData(prevData => {\n        const newRow = {\n          id: prevData.length ? prevData[prevData.length - 1].id + 1 : 1\n        };\n        columnlist.forEach(col => newRow[col.accessor] = col.accessor === 'id' ? newRow.id : \"\");\n        setNewRowIndex(prevData.length);\n        setEditableCell({\n          rowIndex: prevData.length,\n          columnId: columnlist[0].accessor\n        });\n        setIsEditing(true);\n        onEditingChange === null || onEditingChange === void 0 ? void 0 : onEditingChange(true); // Сообщаем родительскому компоненту о начале редактирования\n\n        return [...prevData, newRow];\n      });\n    }\n  };\n  const cancelEdit = () => {\n    setData(prevData => {\n      if (newRowIndex !== null) {\n        return prevData.filter((row, index) => index !== newRowIndex);\n      }\n      return originalData.length ? originalData : prevData;\n    });\n    setEditableCell(null);\n    setIsEditing(false);\n    setNewRowIndex(null);\n    setEditedCells({});\n    setOriginalData([]);\n    onEditingChange === null || onEditingChange === void 0 ? void 0 : onEditingChange(false); // Явно передаем, что редактирование отменено\n  };\n  const sendData = async () => {\n    if (Object.keys(editedCells).length > 0) {\n      const updatedRows = {};\n      Object.keys(editedCells).forEach(key => {\n        const [rowIndex, columnId] = key.split('-');\n        if (columnId !== 'id') {\n          if (!updatedRows[rowIndex]) {\n            updatedRows[rowIndex] = {\n              ...data[rowIndex]\n            };\n          }\n          updatedRows[rowIndex][columnId] = editedCells[key];\n        }\n      });\n      const updatedData = [...data];\n      for (const updatedRow of Object.values(updatedRows)) {\n        try {\n          if (updatedRow.id > Math.max(...data.map(row => row.id), 0)) {\n            console.log(\"Создание новой строки:\", updatedRow);\n            const response = await fetchData(`${currentTab}`, 'post', updatedRow);\n            if (response) {\n              updatedData.push(response);\n            }\n          } else {\n            console.log(`Обновление данных для id ${updatedRow.id}:`, updatedRow);\n            const response = await fetchData(`${currentTab}/${updatedRow.id}`, 'put', updatedRow);\n            if (response) {\n              const index = updatedData.findIndex(row => row.id === updatedRow.id);\n              if (index !== -1) {\n                updatedData[index] = {\n                  ...updatedData[index],\n                  ...updatedRow\n                };\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Ошибка при отправке данных:\", error);\n        }\n      }\n      setData(updatedData);\n      setOriginalData([...updatedData]); // Обновляем originalData после успешного сохранения\n      setEditedCells({});\n      setIsEditing(false);\n      setNewRowIndex(null);\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    addRow,\n    cancelEdit,\n    sendData,\n    isEditing\n  }));\n  useEffect(() => {\n    setData(fulldata);\n  }, [fulldata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map((headerGroup, index) => /*#__PURE__*/_createElement(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          key: index,\n          className: classes.table__row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }\n        }, headerGroup.headers.map(column => /*#__PURE__*/_createElement(\"th\", {\n          ...column.getHeaderProps(),\n          key: column.id,\n          className: classes.table__cell,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }\n        }, column.render('Header')))))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          const isNewRow = rowIndex === newRowIndex; // Проверяем, является ли строка новой\n          return /*#__PURE__*/_createElement(\"tr\", {\n            ...row.getRowProps(),\n            key: rowIndex,\n            className: classes.table__row,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }\n          }, row.cells.map(cell => /*#__PURE__*/_createElement(\"td\", {\n            ...cell.getCellProps(),\n            key: cell.column.id,\n            className: classes.table__cell,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }\n          }, cell.column.id === 'id' ?\n          /*#__PURE__*/\n          // Если столбец 'id', то ячейка нередактируемая\n          _jsxDEV(\"div\", {\n            className: classes.cellContent,\n            children: cell.render('Cell')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 45\n          }, this) : (editableCell === null || editableCell === void 0 ? void 0 : editableCell.rowIndex) === rowIndex && (editableCell === null || editableCell === void 0 ? void 0 : editableCell.columnId) === cell.column.id ?\n          /*#__PURE__*/\n          // Редактируемая ячейка (одиночная)\n          _jsxDEV(\"input\", {\n            className: classes.input,\n            value: editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || '',\n            onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value),\n            onBlur: handleBlur,\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 45\n          }, this) : isNewRow && cell.column.id !== 'id' ?\n          /*#__PURE__*/\n          // Новая строка (все ячейки, кроме 'id', редактируемые)\n          _jsxDEV(\"input\", {\n            className: classes.input,\n            value: editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || '',\n            onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value),\n            onBlur: handleBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 45\n          }, this) :\n          /*#__PURE__*/\n          // Обычная ячейка (нередактируемая)\n          _jsxDEV(\"div\", {\n            className: classes.cellContent,\n            children: [editedCells[`${rowIndex}-${cell.column.id}`] || cell.render('Cell'), (cell.column.id === 'Статус' || cell.column.id.startsWith('Сотрудник') || cell.column.id === 'Адрес') && /*#__PURE__*/_jsxDEV(Pencil, {\n              className: classes.editIcon,\n              size: 16,\n              onClick: () => handleEditClick(rowIndex, cell.column.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 45\n          }, this))));\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}, \"l5q5IgEvz+rRIgDgg69DAWOS6QE=\", false, function () {\n  return [useTable];\n})), \"l5q5IgEvz+rRIgDgg69DAWOS6QE=\", false, function () {\n  return [useTable];\n});\n_c2 = BasicTable;\nexport { BasicTable };\nvar _c, _c2;\n$RefreshReg$(_c, \"BasicTable$forwardRef\");\n$RefreshReg$(_c2, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useImperativeHandle","forwardRef","createElement","_createElement","useTable","useSortBy","fetchData","Pencil","classes","jsxDEV","_jsxDEV","BasicTable","_s","_c","columnlist","fulldata","onEditingChange","ref","currentTab","window","location","pathname","slice","data","setData","editableCell","setEditableCell","isEditing","setIsEditing","newRowIndex","setNewRowIndex","originalData","setOriginalData","columns","response","setResponse","fetchError","setFetchError","editedCells","setEditedCells","isEditingWithPencil","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","handleInputChange","rowIndex","columnId","value","prev","prevData","newData","handleEditClick","handleBlur","event","setTimeout","document","activeElement","classList","contains","input","addRow","lastRowIndex","length","lastRow","isLastRowEmpty","Object","keys","every","key","undefined","accessor","newRow","id","forEach","col","cancelEdit","filter","row","index","sendData","updatedRows","split","updatedData","updatedRow","values","Math","max","map","console","log","push","findIndex","error","className","container","children","table","headerGroup","getHeaderGroupProps","table__row","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","headers","column","getHeaderProps","table__cell","render","isNewRow","getRowProps","cells","cell","getCellProps","cellContent","onChange","e","target","onBlur","autoFocus","startsWith","editIcon","size","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport { fetchData } from '../../../utils/fetchData';\r\nimport { Pencil } from 'lucide-react';\r\nimport classes from './MyTable.module.css';\r\n\r\nconst BasicTable = forwardRef(({ columnlist, fulldata, onEditingChange }, ref) => {\r\n    const currentTab = window.location.pathname.slice(1);\r\n    const [data, setData] = useState(fulldata);\r\n    const [editableCell, setEditableCell] = useState(null);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [newRowIndex, setNewRowIndex] = useState(null); // Индекс новой строки\r\n    const [originalData, setOriginalData] = useState([]); // Храним исходные данные для восстановления\r\n    const columns = useMemo(() => columnlist, [columnlist]);\r\n    const [response, setResponse] = useState(null);\r\n    const [fetchError, setFetchError] = useState(null);\r\n    const [editedCells, setEditedCells] = useState({});\r\n\r\n    // Константа, которая будет true, если редактируется любая ячейка с помощью Pencil\r\n    const isEditingWithPencil = isEditing && editableCell !== null;\r\n\r\n    useEffect(() => {\r\n        if (onEditingChange) {\r\n            onEditingChange(isEditingWithPencil);\r\n        }\r\n    }, [isEditingWithPencil, isEditing]);\r\n    \r\n\r\n    const tableInstance = useTable({ columns, data }, useSortBy);\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        setEditedCells((prev) => ({\r\n            ...prev,\r\n            [`${rowIndex}-${columnId}`]: value,\r\n        }));\r\n        setData(prevData => {\r\n            const newData = [...prevData];\r\n            newData[rowIndex] = { ...newData[rowIndex], [columnId]: value };\r\n            return newData;\r\n        });\r\n    };\r\n\r\n    const handleEditClick = (rowIndex, columnId) => {\r\n        setEditableCell({ rowIndex, columnId });\r\n        setIsEditing(true);\r\n    };\r\n    \r\n    \r\n    const handleBlur = (event) => {\r\n        setTimeout(() => {\r\n            if (!document.activeElement.classList.contains(classes.input)) {\r\n                setEditableCell(null);\r\n                setIsEditing(false);\r\n            }\r\n        }, 100);\r\n    };\r\n    \r\n    \r\n\r\n    const addRow = () => {\r\n        if (isEditing) return; // Если уже редактируем, не создаем новую строку\r\n    \r\n        // Проверяем, есть ли предыдущая строка и является ли она пустой\r\n        const lastRowIndex = data.length - 1;\r\n        const lastRow = data[lastRowIndex];\r\n    \r\n        const isLastRowEmpty = lastRow && Object.keys(lastRow).every((key) => {\r\n            if (key === 'id') return true; // Пропускаем проверку для 'id'\r\n            return lastRow[key] === \"\" || lastRow[key] === null || lastRow[key] === undefined;\r\n        });\r\n    \r\n        if (isLastRowEmpty) {\r\n            // Если предыдущая строка пустая, делаем её редактируемой\r\n            setEditableCell({ rowIndex: lastRowIndex, columnId: columnlist[0].accessor });\r\n            setIsEditing(true);\r\n            onEditingChange?.(true); // Сообщаем родительскому компоненту о начале редактирования\r\n        } else {\r\n            // Если предыдущая строка не пустая, добавляем новую строку\r\n            setData(prevData => {\r\n                const newRow = { id: prevData.length ? prevData[prevData.length - 1].id + 1 : 1 };\r\n                columnlist.forEach(col => newRow[col.accessor] = col.accessor === 'id' ? newRow.id : \"\");\r\n    \r\n                setNewRowIndex(prevData.length);\r\n                setEditableCell({ rowIndex: prevData.length, columnId: columnlist[0].accessor });\r\n                setIsEditing(true);\r\n                onEditingChange?.(true); // Сообщаем родительскому компоненту о начале редактирования\r\n    \r\n                return [...prevData, newRow];\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    const cancelEdit = () => {\r\n        setData(prevData => {\r\n            if (newRowIndex !== null) {\r\n                return prevData.filter((row, index) => index !== newRowIndex);\r\n            }\r\n            return originalData.length ? originalData : prevData;\r\n        });\r\n        setEditableCell(null);\r\n        setIsEditing(false);\r\n        setNewRowIndex(null);\r\n        setEditedCells({});\r\n        setOriginalData([]);\r\n        onEditingChange?.(false); // Явно передаем, что редактирование отменено\r\n    };\r\n    \r\n\r\n    const sendData = async () => {\r\n        if (Object.keys(editedCells).length > 0) {\r\n            const updatedRows = {};\r\n    \r\n            Object.keys(editedCells).forEach((key) => {\r\n                const [rowIndex, columnId] = key.split('-');\r\n                if (columnId !== 'id') {\r\n                    if (!updatedRows[rowIndex]) {\r\n                        updatedRows[rowIndex] = { ...data[rowIndex] };\r\n                    }\r\n                    updatedRows[rowIndex][columnId] = editedCells[key];\r\n                }\r\n            });\r\n    \r\n            const updatedData = [...data];\r\n            for (const updatedRow of Object.values(updatedRows)) {\r\n                try {\r\n                    if (updatedRow.id > Math.max(...data.map(row => row.id), 0)) {\r\n                        console.log(\"Создание новой строки:\", updatedRow);\r\n                        const response = await fetchData(`${currentTab}`, 'post', updatedRow);\r\n                        if (response) {\r\n                            updatedData.push(response);\r\n                        }\r\n                    } else {\r\n                        console.log(`Обновление данных для id ${updatedRow.id}:`, updatedRow);\r\n                        const response = await fetchData(`${currentTab}/${updatedRow.id}`, 'put', updatedRow);\r\n                        if (response) {\r\n                            const index = updatedData.findIndex(row => row.id === updatedRow.id);\r\n                            if (index !== -1) {\r\n                                updatedData[index] = { ...updatedData[index], ...updatedRow };\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Ошибка при отправке данных:\", error);\r\n                }\r\n            }\r\n    \r\n            setData(updatedData);\r\n            setOriginalData([...updatedData]); // Обновляем originalData после успешного сохранения\r\n            setEditedCells({});\r\n            setIsEditing(false);\r\n            setNewRowIndex(null);\r\n        }\r\n    };\r\n    \r\n    \r\n    useImperativeHandle(ref, () => ({\r\n        addRow,\r\n        cancelEdit,\r\n        sendData,\r\n        isEditing\r\n    }));\r\n    \r\n    \r\n    useEffect(() => {\r\n        setData(fulldata);\r\n    }, [fulldata]);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup, index) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()} key={index} className={classes.table__row}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} key={column.id} className={classes.table__cell}>\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        const isNewRow = rowIndex === newRowIndex; // Проверяем, является ли строка новой\r\n                        return (\r\n                            <tr {...row.getRowProps()} key={rowIndex} className={classes.table__row}>\r\n                                {row.cells.map((cell) => (\r\n                                    <td {...cell.getCellProps()} key={cell.column.id} className={classes.table__cell}>\r\n                                        {cell.column.id === 'id' ? ( // Если столбец 'id', то ячейка нередактируемая\r\n                                            <div className={classes.cellContent}>\r\n                                                {cell.render('Cell')}\r\n                                            </div>\r\n                                        ) : (editableCell?.rowIndex === rowIndex && editableCell?.columnId === cell.column.id) ? (\r\n                                            // Редактируемая ячейка (одиночная)\r\n                                            <input\r\n                                                className={classes.input}\r\n                                                value={editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || ''}\r\n                                                onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                onBlur={handleBlur}\r\n                                                autoFocus\r\n                                            />\r\n                                        ) : isNewRow && cell.column.id !== 'id' ? (\r\n                                            // Новая строка (все ячейки, кроме 'id', редактируемые)\r\n                                            <input\r\n                                                className={classes.input}\r\n                                                value={editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || ''}\r\n                                                onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                        ) : (\r\n                                            // Обычная ячейка (нередактируемая)\r\n                                            <div className={classes.cellContent}>\r\n                                                {editedCells[`${rowIndex}-${cell.column.id}`] || cell.render('Cell')}\r\n                                                {(cell.column.id === 'Статус' || cell.column.id.startsWith('Сотрудник') || cell.column.id === 'Адрес') && (\r\n                                                    <Pencil\r\n                                                        className={classes.editIcon}\r\n                                                        size={16}\r\n                                                        onClick={() => handleEditClick(rowIndex, cell.column.id)}\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </td>                                                                \r\n                                ))}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            {fetchError && <div>{fetchError}</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport { BasicTable };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}