{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './Columns';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BasicTable({\n  fulldata\n}) {\n  _s();\n  const [data, setData] = useState(fulldata); // Храним данные\n  const [editableRowIndex, setEditableRowIndex] = useState(null); // Индекс редактируемой строки\n\n  const columns = useMemo(() => COLUMNS, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n\n  // Функция добавления новой строки\n  const addRow = () => {\n    const newRow = {\n      id: data.length + 1,\n      name: '',\n      age: ''\n    };\n    setData([...data, newRow]); // Добавляем новую строку\n    setEditableRowIndex(data.length); // Делаем только эту строку редактируемой\n  };\n\n  // Обработчик изменения значений в новой строке\n  const handleInputChange = (rowIndex, columnId, value) => {\n    if (rowIndex === editableRowIndex) {\n      // Разрешаем редактирование только новой строки\n      const newData = [...data];\n      newData[rowIndex][columnId] = value;\n      setData(newData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.addButton,\n      onClick: addRow,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: classes.table__row,\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: classes.table__cell,\n            ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: classes.table__row,\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: classes.table__cell,\n              ...cell.getCellProps(),\n              children: rowIndex === editableRowIndex && cell.column.id !== 'id' ? /*#__PURE__*/_jsxDEV(\"input\", {\n                className: classes.input,\n                value: cell.value || '',\n                onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 45\n              }, this) : cell.render('Cell') // Оставляем обычный текст\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicTable, \"tPJJF7ajtRvAHALDI7nO62Kp2rw=\", false, function () {\n  return [useTable];\n});\n_c = BasicTable;\nexport default BasicTable;\nvar _c;\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useTable","COLUMNS","classes","jsxDEV","_jsxDEV","BasicTable","fulldata","_s","data","setData","editableRowIndex","setEditableRowIndex","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","addRow","newRow","id","length","name","age","handleInputChange","rowIndex","columnId","value","newData","className","container","children","addButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","table","map","headerGroup","table__row","getHeaderGroupProps","headers","column","table__cell","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","input","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { COLUMNS } from './Columns';\r\nimport classes from './MyTable.module.css';\r\n\r\nfunction BasicTable({ fulldata }) {\r\n    const [data, setData] = useState(fulldata); // Храним данные\r\n    const [editableRowIndex, setEditableRowIndex] = useState(null); // Индекс редактируемой строки\r\n\r\n    const columns = useMemo(() => COLUMNS, []); \r\n\r\n    const tableInstance = useTable({\r\n        columns,\r\n        data\r\n    });\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    // Функция добавления новой строки\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: data.length + 1,\r\n            name: '',\r\n            age: '',\r\n        };\r\n        setData([...data, newRow]); // Добавляем новую строку\r\n        setEditableRowIndex(data.length); // Делаем только эту строку редактируемой\r\n    };\r\n\r\n    // Обработчик изменения значений в новой строке\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        if (rowIndex === editableRowIndex) { // Разрешаем редактирование только новой строки\r\n            const newData = [...data];\r\n            newData[rowIndex][columnId] = value;\r\n            setData(newData);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <button className={classes.addButton} onClick={addRow}>Добавить строку</button>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr className={classes.table__row} {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th className={classes.table__cell} {...column.getHeaderProps()}>\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr className={classes.table__row} {...row.getRowProps()}>\r\n                                {row.cells.map(cell => (\r\n                                    <td className={classes.table__cell} {...cell.getCellProps()}>\r\n                                        {rowIndex === editableRowIndex && cell.column.id !== 'id' ? (\r\n                                            <input\r\n                                                className={classes.input}\r\n                                                value={cell.value || ''}\r\n                                                onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                            />\r\n                                        ) : (\r\n                                            cell.render('Cell') // Оставляем обычный текст\r\n                                        )}\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BasicTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}