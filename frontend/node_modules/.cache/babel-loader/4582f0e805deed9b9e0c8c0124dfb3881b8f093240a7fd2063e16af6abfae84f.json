{"ast":null,"code":"export const fetchData = async (url, method, data = null, setResponse = null, setFetchError = null, setFetchSuccess = null, isFileDownload = false, fileName = \"download.csv\") => {\n  let access = Cookies.get(\"access\");\n  try {\n    const response = await axios({\n      method,\n      url: `http://localhost:8000/api/${url}`,\n      // Убрали лишний слеш\n      data,\n      headers: {\n        Authorization: `Bearer ${access}`,\n        ...(data instanceof FormData ? {} : {\n          \"Content-Type\": \"application/json\"\n        })\n      },\n      responseType: isFileDownload ? \"blob\" : \"json\"\n    });\n    if (isFileDownload) {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      window.URL.revokeObjectURL(url);\n    } else {\n      setResponse === null || setResponse === void 0 ? void 0 : setResponse(response.data);\n      setFetchSuccess === null || setFetchSuccess === void 0 ? void 0 : setFetchSuccess(response.data.message);\n    }\n  } catch (error) {\n    if (error.response) {\n      const fetchError = error.response.data.detail || \"Ошибка сервера.\";\n      console.error(\"Ошибка ответа:\", error.response.data);\n      setFetchError === null || setFetchError === void 0 ? void 0 : setFetchError(fetchError);\n      if (fetchError === \"Authentication credentials were not provided.\") {\n        console.warn(\"Токен истёк. Попытка обновить токен...\");\n        await refreshTokens();\n      }\n    } else {\n      console.error(\"Ошибка сети или сервера:\", error.message);\n      setFetchError === null || setFetchError === void 0 ? void 0 : setFetchError(\"Ошибка сети или сервера.\");\n    }\n  }\n};","map":{"version":3,"names":["fetchData","url","method","data","setResponse","setFetchError","setFetchSuccess","isFileDownload","fileName","access","Cookies","get","response","axios","headers","Authorization","FormData","responseType","window","URL","createObjectURL","Blob","a","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","message","error","fetchError","detail","console","warn","refreshTokens"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/utils/fetchData.js"],"sourcesContent":["export const fetchData = async (\n    url,\n    method,\n    data = null,\n    setResponse = null,\n    setFetchError = null,\n    setFetchSuccess = null,\n    isFileDownload = false,\n    fileName = \"download.csv\"\n) => {\n    let access = Cookies.get(\"access\");\n\n    try {\n        const response = await axios({\n            method,\n            url: `http://localhost:8000/api/${url}`,  // Убрали лишний слеш\n            data,\n            headers: {\n                Authorization: `Bearer ${access}`,\n                ...(data instanceof FormData ? {} : { \"Content-Type\": \"application/json\" })\n            },\n            responseType: isFileDownload ? \"blob\" : \"json\",\n        });\n\n        if (isFileDownload) {\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n            window.URL.revokeObjectURL(url);\n        } else {\n            setResponse?.(response.data);\n            setFetchSuccess?.(response.data.message);\n        }\n    } catch (error) {\n        if (error.response) {\n            const fetchError = error.response.data.detail || \"Ошибка сервера.\";\n            console.error(\"Ошибка ответа:\", error.response.data);\n            setFetchError?.(fetchError);\n\n            if (fetchError === \"Authentication credentials were not provided.\") {\n                console.warn(\"Токен истёк. Попытка обновить токен...\");\n                await refreshTokens();\n            }\n        } else {\n            console.error(\"Ошибка сети или сервера:\", error.message);\n            setFetchError?.(\"Ошибка сети или сервера.\");\n        }\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CACrBC,GAAG,EACHC,MAAM,EACNC,IAAI,GAAG,IAAI,EACXC,WAAW,GAAG,IAAI,EAClBC,aAAa,GAAG,IAAI,EACpBC,eAAe,GAAG,IAAI,EACtBC,cAAc,GAAG,KAAK,EACtBC,QAAQ,GAAG,cAAc,KACxB;EACD,IAAIC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EAElC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC;MACzBX,MAAM;MACND,GAAG,EAAE,6BAA6BA,GAAG,EAAE;MAAG;MAC1CE,IAAI;MACJW,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUN,MAAM,EAAE;QACjC,IAAIN,IAAI,YAAYa,QAAQ,GAAG,CAAC,CAAC,GAAG;UAAE,cAAc,EAAE;QAAmB,CAAC;MAC9E,CAAC;MACDC,YAAY,EAAEV,cAAc,GAAG,MAAM,GAAG;IAC5C,CAAC,CAAC;IAEF,IAAIA,cAAc,EAAE;MAChB,MAAMN,GAAG,GAAGiB,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACT,QAAQ,CAACT,IAAI,CAAC,CAAC,CAAC;MACjE,MAAMmB,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,IAAI,GAAGxB,GAAG;MACZqB,CAAC,CAACI,QAAQ,GAAGlB,QAAQ;MACrBe,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,CAAC,CAAC;MAC5BA,CAAC,CAACO,KAAK,CAAC,CAAC;MACTP,CAAC,CAACQ,MAAM,CAAC,CAAC;MACVZ,MAAM,CAACC,GAAG,CAACY,eAAe,CAAC9B,GAAG,CAAC;IACnC,CAAC,MAAM;MACHG,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAGQ,QAAQ,CAACT,IAAI,CAAC;MAC5BG,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGM,QAAQ,CAACT,IAAI,CAAC6B,OAAO,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACrB,QAAQ,EAAE;MAChB,MAAMsB,UAAU,GAAGD,KAAK,CAACrB,QAAQ,CAACT,IAAI,CAACgC,MAAM,IAAI,iBAAiB;MAClEC,OAAO,CAACH,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACrB,QAAQ,CAACT,IAAI,CAAC;MACpDE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAG6B,UAAU,CAAC;MAE3B,IAAIA,UAAU,KAAK,+CAA+C,EAAE;QAChEE,OAAO,CAACC,IAAI,CAAC,wCAAwC,CAAC;QACtD,MAAMC,aAAa,CAAC,CAAC;MACzB;IACJ,CAAC,MAAM;MACHF,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACD,OAAO,CAAC;MACxD3B,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAG,0BAA0B,CAAC;IAC/C;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}