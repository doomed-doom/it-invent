{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DamsB\\\\Desktop\\\\302\\\\frontend\\\\src\\\\components\\\\UI\\\\Table\\\\BasicTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef, createElement as _createElement } from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport { fetchData } from '../../../utils/fetchData';\nimport { Pencil } from 'lucide-react';\nimport classes from './MyTable.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicTable = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  columnlist,\n  fulldata,\n  onEditingChange\n}, ref) => {\n  _s();\n  const currentTab = window.location.pathname.slice(1);\n  const [data, setData] = useState(fulldata);\n  const [editableCell, setEditableCell] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [newRowIndex, setNewRowIndex] = useState(null);\n  const columns = useMemo(() => columnlist, [columnlist]);\n  const [response, setResponse] = useState(null);\n  const [fetchError, setFetchError] = useState(null);\n  const [editedCells, setEditedCells] = useState({});\n  const isEditingWithPencil = isEditing && editableCell !== null;\n  useEffect(() => {\n    onEditingChange === null || onEditingChange === void 0 ? void 0 : onEditingChange(isEditingWithPencil);\n  }, [isEditingWithPencil, onEditingChange]);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  const handleInputChange = (rowIndex, columnId, value) => {\n    setEditedCells(prev => ({\n      ...prev,\n      [`${rowIndex}-${columnId}`]: value\n    }));\n    setData(prevData => {\n      const newData = [...prevData];\n      newData[rowIndex] = {\n        ...newData[rowIndex],\n        [columnId]: value\n      };\n      return newData;\n    });\n  };\n  const handleEditClick = (rowIndex, columnId) => {\n    setEditableCell({\n      rowIndex,\n      columnId\n    });\n    setIsEditing(true);\n  };\n  const handleBlur = event => {\n    // Проверяем, был ли клик вне таблицы\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      setEditableCell(null);\n      setIsEditing(false);\n      setEditedCells({});\n    }\n  };\n  const addRow = () => {\n    setData(prevData => {\n      const lastId = prevData.length > 0 ? prevData[prevData.length - 1].id : 0;\n      const newRow = {\n        id: lastId + 1\n      };\n      columnlist.forEach(col => {\n        newRow[col.accessor] = col.accessor === 'id' ? lastId + 1 : \"\";\n      });\n      setNewRowIndex(prevData.length);\n      setEditableCell({\n        rowIndex: prevData.length,\n        columnId: columnlist[0].accessor\n      });\n      setIsEditing(true);\n      return [...prevData, newRow];\n    });\n  };\n  const cancelEdit = () => {\n    setData(prevData => {\n      if (newRowIndex !== null) {\n        return prevData.filter((row, index) => index !== newRowIndex);\n      }\n      return prevData;\n    });\n    setEditableCell(null);\n    setIsEditing(false);\n    setNewRowIndex(null);\n    setEditedCells({});\n  };\n  const sendData = async () => {\n    if (Object.keys(editedCells).length > 0) {\n      const updatedRows = {};\n      Object.keys(editedCells).forEach(key => {\n        const [rowIndex, columnId] = key.split('-');\n        if (columnId !== 'id') {\n          if (!updatedRows[rowIndex]) {\n            updatedRows[rowIndex] = {\n              ...data[rowIndex]\n            };\n          }\n          updatedRows[rowIndex][columnId] = editedCells[key];\n        }\n      });\n      const updatedData = [...data];\n      for (const updatedRow of Object.values(updatedRows)) {\n        try {\n          if (updatedRow.id > Math.max(...data.map(row => row.id), 0)) {\n            console.log(\"Создание новой строки:\", updatedRow);\n            const response = await fetchData(`${currentTab}`, 'post', updatedRow);\n            if (response) {\n              updatedData.push(response);\n            }\n          } else {\n            console.log(`Обновление данных для id ${updatedRow.id}:`, updatedRow);\n            const response = await fetchData(`${currentTab}/${updatedRow.id}`, 'put', updatedRow);\n            if (response) {\n              const index = updatedData.findIndex(row => row.id === updatedRow.id);\n              if (index !== -1) {\n                updatedData[index] = {\n                  ...updatedData[index],\n                  ...updatedRow\n                };\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Ошибка при отправке данных:\", error);\n        }\n      }\n      setData(updatedData);\n      setEditedCells({});\n      setIsEditing(false);\n      setNewRowIndex(null);\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    addRow,\n    cancelEdit,\n    sendData\n  }));\n  useEffect(() => {\n    setData(fulldata);\n  }, [fulldata]);\n\n  // Обработчик клика вне таблицы\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (isEditing && !event.target.closest(`.${classes.table}`)) {\n        setEditableCell(null);\n        setIsEditing(false);\n        setEditedCells({});\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isEditing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    onBlur: handleBlur,\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map((headerGroup, index) => /*#__PURE__*/_createElement(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          key: index,\n          className: classes.table__row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }\n        }, headerGroup.headers.map(column => /*#__PURE__*/_createElement(\"th\", {\n          ...column.getHeaderProps(),\n          key: column.id,\n          className: classes.table__cell,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }\n        }, column.render('Header')))))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, rowIndex) => {\n          prepareRow(row);\n          const isNewRow = rowIndex === newRowIndex;\n          return /*#__PURE__*/_createElement(\"tr\", {\n            ...row.getRowProps(),\n            key: rowIndex,\n            className: classes.table__row,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }\n          }, row.cells.map(cell => /*#__PURE__*/_createElement(\"td\", {\n            ...cell.getCellProps(),\n            key: cell.column.id,\n            className: classes.table__cell,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 37\n            }\n          }, cell.column.id === 'id' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.cellContent,\n            children: cell.render('Cell')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 45\n          }, this) : (editableCell === null || editableCell === void 0 ? void 0 : editableCell.rowIndex) === rowIndex && (editableCell === null || editableCell === void 0 ? void 0 : editableCell.columnId) === cell.column.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.input,\n            value: editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || '',\n            onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value),\n            onBlur: handleBlur,\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 45\n          }, this) : isNewRow && cell.column.id !== 'id' ? /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.input,\n            value: editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || '',\n            onChange: e => handleInputChange(rowIndex, cell.column.id, e.target.value),\n            onBlur: handleBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 45\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.cellContent,\n            children: [editedCells[`${rowIndex}-${cell.column.id}`] || cell.render('Cell'), (cell.column.id === 'Статус' || cell.column.id.startsWith('Сотрудник') || cell.column.id === 'Адрес') && /*#__PURE__*/_jsxDEV(Pencil, {\n              className: classes.editIcon,\n              size: 16,\n              onClick: () => handleEditClick(rowIndex, cell.column.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 45\n          }, this))));\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n}, \"ok38BzTXeaWnx6S6S80lAKzzS1k=\", false, function () {\n  return [useTable];\n})), \"ok38BzTXeaWnx6S6S80lAKzzS1k=\", false, function () {\n  return [useTable];\n});\n_c2 = BasicTable;\nexport { BasicTable };\nvar _c, _c2;\n$RefreshReg$(_c, \"BasicTable$forwardRef\");\n$RefreshReg$(_c2, \"BasicTable\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useImperativeHandle","forwardRef","createElement","_createElement","useTable","useSortBy","fetchData","Pencil","classes","jsxDEV","_jsxDEV","BasicTable","_s","_c","columnlist","fulldata","onEditingChange","ref","currentTab","window","location","pathname","slice","data","setData","editableCell","setEditableCell","isEditing","setIsEditing","newRowIndex","setNewRowIndex","columns","response","setResponse","fetchError","setFetchError","editedCells","setEditedCells","isEditingWithPencil","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","handleInputChange","rowIndex","columnId","value","prev","prevData","newData","handleEditClick","handleBlur","event","currentTarget","contains","relatedTarget","addRow","lastId","length","id","newRow","forEach","col","accessor","cancelEdit","filter","row","index","sendData","Object","keys","updatedRows","key","split","updatedData","updatedRow","values","Math","max","map","console","log","push","findIndex","error","handleClickOutside","target","closest","table","document","addEventListener","removeEventListener","className","container","onBlur","children","headerGroup","getHeaderGroupProps","table__row","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","headers","column","getHeaderProps","table__cell","render","isNewRow","getRowProps","cells","cell","getCellProps","cellContent","input","onChange","e","autoFocus","startsWith","editIcon","size","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/DamsB/Desktop/302/frontend/src/components/UI/Table/BasicTable.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect, useImperativeHandle, forwardRef } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport { fetchData } from '../../../utils/fetchData';\r\nimport { Pencil } from 'lucide-react';\r\nimport classes from './MyTable.module.css';\r\n\r\nconst BasicTable = forwardRef(({ columnlist, fulldata, onEditingChange }, ref) => {\r\n    const currentTab = window.location.pathname.slice(1);\r\n    const [data, setData] = useState(fulldata);\r\n    const [editableCell, setEditableCell] = useState(null);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [newRowIndex, setNewRowIndex] = useState(null);\r\n    const columns = useMemo(() => columnlist, [columnlist]);\r\n    const [response, setResponse] = useState(null);\r\n    const [fetchError, setFetchError] = useState(null);\r\n    const [editedCells, setEditedCells] = useState({});\r\n\r\n    const isEditingWithPencil = isEditing && editableCell !== null;\r\n\r\n    useEffect(() => {\r\n        onEditingChange?.(isEditingWithPencil);\r\n    }, [isEditingWithPencil, onEditingChange]);\r\n\r\n    const tableInstance = useTable({ columns, data }, useSortBy);\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n\r\n    const handleInputChange = (rowIndex, columnId, value) => {\r\n        setEditedCells((prev) => ({\r\n            ...prev,\r\n            [`${rowIndex}-${columnId}`]: value,\r\n        }));\r\n        setData(prevData => {\r\n            const newData = [...prevData];\r\n            newData[rowIndex] = { ...newData[rowIndex], [columnId]: value };\r\n            return newData;\r\n        });\r\n    };\r\n\r\n    const handleEditClick = (rowIndex, columnId) => {\r\n        setEditableCell({ rowIndex, columnId });\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const handleBlur = (event) => {\r\n        // Проверяем, был ли клик вне таблицы\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setEditableCell(null);\r\n            setIsEditing(false);\r\n            setEditedCells({});\r\n        }\r\n    };\r\n\r\n    const addRow = () => {\r\n        setData(prevData => {\r\n            const lastId = prevData.length > 0 ? prevData[prevData.length - 1].id : 0;\r\n            const newRow = { id: lastId + 1 };\r\n            \r\n            columnlist.forEach((col) => {\r\n                newRow[col.accessor] = col.accessor === 'id' ? lastId + 1 : \"\";\r\n            });\r\n\r\n            setNewRowIndex(prevData.length);\r\n            setEditableCell({ rowIndex: prevData.length, columnId: columnlist[0].accessor });\r\n            setIsEditing(true);\r\n            return [...prevData, newRow];\r\n        });\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        setData(prevData => {\r\n            if (newRowIndex !== null) {\r\n                return prevData.filter((row, index) => index !== newRowIndex);\r\n            }\r\n            return prevData;\r\n        });\r\n        setEditableCell(null);\r\n        setIsEditing(false);\r\n        setNewRowIndex(null);\r\n        setEditedCells({});\r\n    };\r\n\r\n    const sendData = async () => {\r\n        if (Object.keys(editedCells).length > 0) {\r\n            const updatedRows = {};\r\n    \r\n            Object.keys(editedCells).forEach((key) => {\r\n                const [rowIndex, columnId] = key.split('-');\r\n                if (columnId !== 'id') {\r\n                    if (!updatedRows[rowIndex]) {\r\n                        updatedRows[rowIndex] = { ...data[rowIndex] };\r\n                    }\r\n                    updatedRows[rowIndex][columnId] = editedCells[key];\r\n                }\r\n            });\r\n    \r\n            const updatedData = [...data];\r\n            for (const updatedRow of Object.values(updatedRows)) {\r\n                try {\r\n                    if (updatedRow.id > Math.max(...data.map(row => row.id), 0)) {\r\n                        console.log(\"Создание новой строки:\", updatedRow);\r\n                        const response = await fetchData(`${currentTab}`, 'post', updatedRow);\r\n                        if (response) {\r\n                            updatedData.push(response);\r\n                        }\r\n                    } else {\r\n                        console.log(`Обновление данных для id ${updatedRow.id}:`, updatedRow);\r\n                        const response = await fetchData(`${currentTab}/${updatedRow.id}`, 'put', updatedRow);\r\n                        if (response) {\r\n                            const index = updatedData.findIndex(row => row.id === updatedRow.id);\r\n                            if (index !== -1) {\r\n                                updatedData[index] = { ...updatedData[index], ...updatedRow };\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Ошибка при отправке данных:\", error);\r\n                }\r\n            }\r\n    \r\n            setData(updatedData);\r\n            setEditedCells({});\r\n            setIsEditing(false);\r\n            setNewRowIndex(null);\r\n        }\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        addRow,\r\n        cancelEdit,\r\n        sendData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        setData(fulldata);\r\n    }, [fulldata]);\r\n\r\n    // Обработчик клика вне таблицы\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (isEditing && !event.target.closest(`.${classes.table}`)) {\r\n                setEditableCell(null);\r\n                setIsEditing(false);\r\n                setEditedCells({});\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [isEditing]);\r\n\r\n    return (\r\n        <div className={classes.container} onBlur={handleBlur}>\r\n            <table className={classes.table} {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup, index) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()} key={index} className={classes.table__row}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()} key={column.id} className={classes.table__cell}>\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, rowIndex) => {\r\n                        prepareRow(row);\r\n                        const isNewRow = rowIndex === newRowIndex;\r\n                        return (\r\n                            <tr {...row.getRowProps()} key={rowIndex} className={classes.table__row}>\r\n                                {row.cells.map((cell) => (\r\n                                    <td {...cell.getCellProps()} key={cell.column.id} className={classes.table__cell}>\r\n                                        {cell.column.id === 'id' ? (\r\n                                            <div className={classes.cellContent}>\r\n                                                {cell.render('Cell')}\r\n                                            </div>\r\n                                        ) : (editableCell?.rowIndex === rowIndex && editableCell?.columnId === cell.column.id) ? (\r\n                                            <input\r\n                                                className={classes.input}\r\n                                                value={editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || ''}\r\n                                                onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                onBlur={handleBlur}\r\n                                                autoFocus\r\n                                            />\r\n                                        ) : isNewRow && cell.column.id !== 'id' ? (\r\n                                            <input\r\n                                                className={classes.input}\r\n                                                value={editedCells[`${rowIndex}-${cell.column.id}`] || data[rowIndex][cell.column.id] || ''}\r\n                                                onChange={(e) => handleInputChange(rowIndex, cell.column.id, e.target.value)}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                        ) : (\r\n                                            <div className={classes.cellContent}>\r\n                                                {editedCells[`${rowIndex}-${cell.column.id}`] || cell.render('Cell')}\r\n                                                {(cell.column.id === 'Статус' || cell.column.id.startsWith('Сотрудник') || cell.column.id === 'Адрес') && (\r\n                                                    <Pencil\r\n                                                        className={classes.editIcon}\r\n                                                        size={16}\r\n                                                        onClick={() => handleEditClick(rowIndex, cell.column.id)}\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </td>                                                                \r\n                                ))}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            {fetchError && <div>{fetchError}</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport { BasicTable };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}